# Renaissance duet config

duetbench:
  name: renaissance
  suite: renaissance
  verbose: false
  seed: 42
  docker_command: docker

  remove_containers: true
  duet_repetitions: 4
  sequential_repetitions: 4
  schedule: randomized_interleaving_trials

  artifacts:
    date: date
    hostname: hostname
    uname: uname -a
    lscpu: lscpu
    meminfo: cat /proc/meminfo

  image: renaissance

  results:
    - /duet/results.json

  # Each test runs with the following JVM config:
  #
  # Memory 1.5G, quater for young generation:
  # -Xms1536M -Xmx1536M -XX:NewSize=375M -XX:MaxNewSize=375M
  #
  # Restrains heap-configuration self adaptation
  # -XX:SurvivorRatio=4
  # -XX:-UseAdaptiveSizePolicy -XX:-UsePSAdaptiveSurvivorSizePolicy
  # -XX:MaxTenuringThreshold=4 -XX:InitialTenuringThreshold=4
  # -XX:+UseParallelGC -XX:+UseParallelOldGC
  run_base: java -Xms1536M -Xmx1536M -XX:NewSize=375M -XX:MaxNewSize=375M -XX:SurvivorRatio=4 -XX:-UseAdaptiveSizePolicy -XX:-UsePSAdaptiveSurvivorSizePolicy -XX:MaxTenuringThreshold=4 -XX:InitialTenuringThreshold=4 -XX:+UseParallelGC -XX:+UseParallelOldGC -jar renaissance-gpl-0.13.0.jar --repetitions 100 --json /duet/results.json
  timeout: 600

  duets:
    - akka-uct
    - als
    - chi-square
    - db-shootout
    - dec-tree
    - dotty
    - finagle-chirper
    - finagle-http
    - fj-kmeans
    - future-genetic
    - gauss-mix
    - log-regression
    - mnemonics
    - movie-lens
    - naive-bayes
    #- neo4j-analytics fails on Java heap out of space
    - page-rank
    - par-mnemonics
    - philosophers
    - reactors
    - rx-scrabble
    - scala-doku
    - scala-kmeans
    - scala-stm-bench7
    - scrabble

akka-uct:
  # Runs the Unbalanced Cobwebbed Tree actor workload in Akka.

  A:
    run: akka-uct

als:
  # Runs the ALS algorithm from the Spark MLlib.

  A:
    run: als


chi-square:
  # Runs the chi-square test from Spark MLlib.
  A:
    run: chi-square


db-shootout:
  # Executes a shootout test using several in-memory databases.

  A:
    run: db-shootout


dec-tree:
  # Runs the Random Forest algorithm from Spark MLlib.

  A:
    run: dec-tree


dotty:
  # Runs the Dotty compiler on a set of source code files.

  A:
    run: dotty


finagle-chirper:
  # Simulates a microblogging service using Twitter Finagle.

  A:
    run: finagle-chirper


finagle-http:
  # Sends many small Finagle HTTP requests to a Finagle HTTP server and awaits

  A:
    run: finagle-http

fj-kmeans:
  # Runs the k-means algorithm using the fork/join framework.

  A:
    run: fj-kmeans


future-genetic:
  # Runs a genetic algorithm using the Jenetics library and futures.

  A:
    run: future-genetic


gauss-mix:
  # Computes a Gaussian mixture model using expectation-maximization.

  A:
    run: gauss-mix


log-regression:
  # Runs the logistic regression workload from the Spark MLlib.

  A:
    run: log-regression


mnemonics:
  # Solves the phone mnemonics problem using JDK streams.

  A:
    run: mnemonics


movie-lens:
  # Recommends movies using the ALS algorithm.

  A:
    run: movie-lens


naive-bayes:
  # Runs the multinomial naive Bayes algorithm from the Spark MLlib.

  A:
    run: naive-bayes


neo4j-analytics:
  # Executes Neo4J graph queries against a movie database.

  A:
    run: neo4j-analytics


page-rank:
  # Runs a number of PageRank iterations, using RDDs.

  A:
    run: page-rank


par-mnemonics:
  # Solves the phone mnemonics problem using parallel JDK streams.

  A:
    run: par-mnemonics


philosophers:
  # Solves a variant of the dining philosophers problem using ScalaSTM.

  A:
    run: philosophers


reactors:
  # Runs benchmarks inspired by the Savina microbenchmark workloads in a
  # sequence on Reactors.IO.

  A:
    run: reactors


rx-scrabble:
  # Solves the Scrabble puzzle using the Rx streams.

  A:
    run: rx-scrabble


scala-doku:
  # Solves Sudoku Puzzles using Scala collections.

  A:
    run: scala-doku


scala-kmeans:
  # Runs the K-Means algorithm using Scala collections.

  A:
    run: scala-kmeans


scala-stm-bench7:
  # Runs the stmbench7 benchmark using ScalaSTM.

  A:
    run: scala-stm-bench7


scrabble:
  # Solves the Scrabble puzzle using JDK Streams.

  A:
    run: scrabble
